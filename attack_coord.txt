if self.attack_number >= 4 and self.attack_hit_log[
		  -1] == False and self.attack_hit_log[-2] == True and self.attack_hit_log[
		   -3] == True and self.found_ship == True:
			return self.get_attack_coord_after_two_hits_then_miss(player_enemy_board)
		if self.attack_number >= 6 and self.attack_hit_log[
		  -1] == True and self.attack_hit_log[-2] == False and self.attack_hit_log[
		   -3] == False and self.attack_hit_log[-4] == False and self.attack_hit_log[
		    -5] == True and self.found_ship == True:
			return self.get_attack_coord_after_two_hits_on_ship(-5, -1, player_enemy_board)
		if self.attack_number >= 5 and self.attack_hit_log[
		  -1] == True and self.attack_hit_log[-2] == False and self.attack_hit_log[
		   -3] == False and self.attack_hit_log[
		    -4] == True and self.found_ship == True:
			return self.get_attack_coord_after_two_hits_on_ship(-4, -1, player_enemy_board)
		if self.attack_number >= 4 and self.attack_hit_log[
		  -1] == True and self.attack_hit_log[-2] == False and self.attack_hit_log[
		   -3] == True and self.found_ship == True:
			return self.get_attack_coord_after_two_hits_on_ship(-3, -1, player_enemy_board)
		if self.attack_number >= 3 and self.attack_hit_log[
		  -1] == True and self.attack_hit_log[-2] == True and self.found_ship == True:
			return self.get_attack_coord_after_two_hits_on_ship(-2, -1, player_enemy_board)
		if self.attack_number >= 2 and self.attack_hit_log[-1] == True:
			return self.get_attack_coord_after_hit(-1, player_enemy_board)
		if self.attack_number >= 3 and self.attack_hit_log[
		  -1] == False and self.attack_hit_log[
		   -2] == True and self.found_ship == True:
			return self.get_attack_coord_after_hit(-2, player_enemy_board)
		if self.attack_number >= 4 and self.attack_hit_log[
		  -1] == False and self.attack_hit_log[-2] == False and self.attack_hit_log[
		   -3] == True and self.found_ship == True:
			return self.get_attack_coord_after_hit(-3, player_enemy_board)
		if self.attack_number >= 5 and self.attack_hit_log[
		  -1] == False and self.attack_hit_log[-2] == False and self.attack_hit_log[
		   -3] == False and self.attack_hit_log[-4] and self.found_ship == True:
			return self.get_attack_coord_after_hit(-4, player_enemy_board)

	def get_attack_coord_after_two_hits_on_ship(self, hit1, hit2, player_enemy_board):
		first_hit_coord_letter = self.attack_coord_log[hit1][0]
		first_hit_coord_number = int(self.attack_coord_log[hit1][1:])
		second_hit_coord_letter = self.attack_coord_log[hit2][0]
		second_hit_coord_number = int(self.attack_coord_log[hit2][1:])
		if first_hit_coord_letter == second_hit_coord_letter:
			if second_hit_coord_number == 1:
				return (first_hit_coord_letter + str(first_hit_coord_number + 1))
			if second_hit_coord_number == 10:
				return (first_hit_coord_letter + str(first_hit_coord_number - 1))
			if first_hit_coord_number > second_hit_coord_number:
				if player_enemy_board[first_hit_coord_letter + str(second_hit_coord_number - 1)] == 'X' or player_enemy_board[first_hit_coord_letter + str(second_hit_coord_number - 1)] == 'O':
					return (first_hit_coord_letter + str(first_hit_coord_number + 1))
				return (first_hit_coord_letter + str(second_hit_coord_number - 1))
			if first_hit_coord_number < second_hit_coord_number:
				if player_enemy_board[first_hit_coord_letter + str(second_hit_coord_number + 1)] == 'X' or player_enemy_board[first_hit_coord_letter + str(second_hit_coord_number + 1)] == 'O':
					return (first_hit_coord_letter + str(first_hit_coord_number - 1))
				return (first_hit_coord_letter + str(second_hit_coord_number + 1))
		if first_hit_coord_number == second_hit_coord_number:
			if second_hit_coord_letter == 'A':
				return (chr(ord(first_hit_coord_letter) + 1) + str(first_hit_coord_number))
			if second_hit_coord_letter == 'J':
				return (chr(ord(first_hit_coord_letter) - 1) + str(first_hit_coord_number))
			if first_hit_coord_letter > second_hit_coord_letter:
				if player_enemy_board[chr(ord(second_hit_coord_letter) - 1) + str(first_hit_coord_number)] == 'X' or player_enemy_board[chr(ord(second_hit_coord_letter) - 1) + str(first_hit_coord_number)] == 'O':
					return (chr(ord(first_hit_coord_letter) + 1) + str(first_hit_coord_number))
				return (chr(ord(second_hit_coord_letter) - 1) +
				        str(first_hit_coord_number))
			if first_hit_coord_letter < second_hit_coord_letter:
				if player_enemy_board[chr(ord(second_hit_coord_letter) + 1) + str(first_hit_coord_number)] == 'X' or player_enemy_board[chr(ord(second_hit_coord_letter) + 1) + str(first_hit_coord_number)] == 'O':
					return (chr(ord(first_hit_coord_letter) - 1) + str(first_hit_coord_number))
				return (chr(ord(second_hit_coord_letter) + 1) +
				        str(first_hit_coord_number))

	def get_attack_coord_after_two_hits_then_miss(self, player_enemy_board):
		first_hit_coord_letter = self.attack_coord_log[-3][0]
		first_hit_coord_number = int(self.attack_coord_log[-3][1:])
		second_hit_coord_letter = self.attack_coord_log[-2][0]
		second_hit_coord_number = int(self.attack_coord_log[-2][1:])
		if first_hit_coord_letter == second_hit_coord_letter:
			if first_hit_coord_number > second_hit_coord_number:
				if player_enemy_board[
				  first_hit_coord_letter +
				  str(first_hit_coord_number + 1)] == 'X' or player_enemy_board[
				   first_hit_coord_letter + str(first_hit_coord_number + 1)] == 'O':
					if player_enemy_board[
					  first_hit_coord_letter +
					  str(first_hit_coord_number + 2)] == 'X' or player_enemy_board[
					   first_hit_coord_letter + str(first_hit_coord_number + 2)] == 'O':
						return (first_hit_coord_letter + str(first_hit_coord_number + 3))
					return (first_hit_coord_letter + str(first_hit_coord_number + 2))
				return (first_hit_coord_letter + str(first_hit_coord_number + 1))
			if first_hit_coord_number < second_hit_coord_number:
				if player_enemy_board[
				  first_hit_coord_letter +
				  str(first_hit_coord_number - 1)] == 'X' or player_enemy_board[
				   first_hit_coord_letter + str(first_hit_coord_number - 1)] == 'O':
					if player_enemy_board[
					  first_hit_coord_letter +
					  str(first_hit_coord_number - 2)] == 'X' or player_enemy_board[
					   first_hit_coord_letter + str(first_hit_coord_number - 2)] == 'O':
						return (first_hit_coord_letter + str(first_hit_coord_number - 3))
					return (first_hit_coord_letter + str(first_hit_coord_number - 2))
				return (first_hit_coord_letter + str(first_hit_coord_number - 1))
		if first_hit_coord_number == second_hit_coord_number:
			if first_hit_coord_letter > second_hit_coord_letter:
				if player_enemy_board[
				  chr(ord(first_hit_coord_letter) + 1) +
				  str(first_hit_coord_number)] == 'X' or player_enemy_board[
				   chr(ord(first_hit_coord_letter) + 1) +
				   str(first_hit_coord_number)] == 'O':
					if player_enemy_board[
					  chr(ord(first_hit_coord_letter) + 2) +
					  str(first_hit_coord_number)] == 'X' or player_enemy_board[
					   chr(ord(first_hit_coord_letter) + 2) +
					   str(first_hit_coord_number)] == 'O':
						return (chr(ord(first_hit_coord_letter) + 3) +
						        str(first_hit_coord_number))
					return (chr(ord(first_hit_coord_letter) + 2) +
					        str(first_hit_coord_number))
				return (chr(ord(first_hit_coord_letter) + 1) + str(first_hit_coord_number))
			if first_hit_coord_letter < second_hit_coord_letter:
				if player_enemy_board[
				  chr(ord(first_hit_coord_letter) - 1) +
				  str(first_hit_coord_number)] == 'X' or player_enemy_board[
				   chr(ord(first_hit_coord_letter) - 1) +
				   str(first_hit_coord_number)] == 'O':
					if player_enemy_board[
					  chr(ord(first_hit_coord_letter) - 2) +
					  str(first_hit_coord_number)] == 'X' or player_enemy_board[
					   chr(ord(first_hit_coord_letter) - 2) +
					   str(first_hit_coord_number)] == 'O':
						return (chr(ord(first_hit_coord_letter) - 3) +
						        str(first_hit_coord_number))
					return (chr(ord(first_hit_coord_letter) - 2) +
					        str(first_hit_coord_number))
				return (chr(ord(first_hit_coord_letter) - 1) + str(first_hit_coord_number))

#hit, miss, hit, miss
#hit, miss, miss, hit, miss
#after two hits, if the next coordinate already has an 'X' or 'O'

https://towardsdatascience.com/coding-an-intelligent-battleship-agent-bf0064a4b319